// Code generated by github.com/sonatard/gqlgenc, DO NOT EDIT.

package gen

import (
	"context"
	"net/http"

	"github.com/sonatard/gqlgenc/clientv2"
)

type GithubGraphQLClient interface {
	GetUserProfileName(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetUserProfileName, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli *http.Client, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) GithubGraphQLClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type GetUserProfileName_User_Profile struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetUserProfileName_User_Profile) GetName() string {
	if t == nil {
		t = &GetUserProfileName_User_Profile{}
	}
	return t.Name
}

type GetUserProfileName_User struct {
	Profile GetUserProfileName_User_Profile "json:\"profile\" graphql:\"profile\""
}

func (t *GetUserProfileName_User) GetProfile() *GetUserProfileName_User_Profile {
	if t == nil {
		t = &GetUserProfileName_User{}
	}
	return &t.Profile
}

type GetUserProfileName struct {
	User GetUserProfileName_User "json:\"user\" graphql:\"user\""
}

func (t *GetUserProfileName) GetUser() *GetUserProfileName_User {
	if t == nil {
		t = &GetUserProfileName{}
	}
	return &t.User
}

const GetUserProfileNameDocument = `query GetUserProfileName {
	user {
		profile {
			name
		}
	}
}
`

func (c *Client) GetUserProfileName(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetUserProfileName, error) {
	vars := map[string]interface{}{}

	var res GetUserProfileName
	if err := c.Client.Post(ctx, "GetUserProfileName", GetUserProfileNameDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	GetUserProfileNameDocument: "GetUserProfileName",
}
